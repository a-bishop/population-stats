{"version":3,"sources":["PopulationIncrementer.js","WorldPop.js","Chart.js","Bar.js","BarChart.js","countryPopulations.js","countries.js","Form.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["PopulationIncrementer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","population","launchCounter","_this2","setInterval","setState","react_default","a","createElement","className","toLocaleString","Component","WorldPop","firstPop","total_population","secondPop","operator","emoji","map","index","src_PopulationIncrementer","key","Chart","_ref","children","width","height","viewBox","concat","display","Bar","x","y","country","color","yVal","transform","fill","BarChart","console","log","dataLength","populations","length","highestVal","d3","d","scale","domain","range","MAX_HEIGHT","colour","src_Chart","itemHeight","src_Bar","countryPopulations","countries","Form","randomStartingCountries","i","push","Math","floor","random","selectedCountries","countryAndPop","formSubmitted","handleSubmit","bind","assertThisInitialized","handleChangeCountry","handleAddCountry","handleRemoveCountry","e","selected","slice","target","id","value","preventDefault","newCountryIndex","newCountry","toConsumableArray","pop","countryPops","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","countryPopFiltered","filter","obj","_iterator","Symbol","iterator","next","done","err","return","chart","buttons","addButton","onClick","removeButton","src_BarChart","onSubmit","selectedCountry","onChange","type","Footer","href","App","_isMounted","src_WorldPop","src_Form","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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UACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,sBACThC,WAAY,QAEd,CACEgC,QAAS,YACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,YACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,aACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,QAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,aACThC,WAAY,WAEd,CACEgC,QAAS,WACThC,WAAY,QAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,SACThC,WAAY,QAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,OAEd,CACEgC,QAAS,SACThC,WAAY,QAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,yBACThC,WAAY,SAEd,CACEgC,QAAS,WACThC,WAAY,SAEd,CACEgC,QAAS,SACThC,WAAY,WAEd,CACEgC,QAAS,SACThC,WAAY,QAEd,CACEgC,QAAS,WACThC,WAAY,SAEd,CACEgC,QAAS,eACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,UAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,aACThC,WAAY,QAEd,CACEgC,QAAS,2BACThC,WAAY,SAEd,CACEgC,QAAS,OACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,YAEd,CACEgC,QAAS,WACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,SAEd,CACEgC,QAAS,eACThC,WAAY,OAEd,CACEgC,QAAS,aACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,OACThC,WAAY,UAEd,CACEgC,QAAS,SACThC,WAAY,SAEd,CACEgC,QAAS,iBACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,WACThC,WAAY,QAEd,CACEgC,QAAS,WACThC,WAAY,OAEd,CACEgC,QAAS,qBACThC,WAAY,UAEd,CACEgC,QAAS,aACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,cACThC,WAAY,SAEd,CACEgC,QAAS,oBACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,WACThC,WAAY,WAEd,CACEgC,QAAS,OACThC,WAAY,QAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,mBACThC,WAAY,QAEd,CACEgC,QAAS,QACThC,WAAY,SAEd,CACEgC,QAAS,SACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,YACThC,WAAY,OAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,YACThC,WAAY,OAEd,CACEgC,QAAS,UACThC,WAAY,QAEd,CACEgC,QAAS,aACThC,WAAY,QAEd,CACEgC,QAAS,YACThC,WAAY,UAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,gBACThC,WAAY,SAEd,CACEgC,QAAS,SACThC,WAAY,QAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,SAEd,CACEgC,QAAS,YACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,QAEd,CACEgC,QAAS,QACThC,WAAY,YAEd,CACEgC,QAAS,YACThC,WAAY,WAEd,CACEgC,QAAS,OACThC,WAAY,UAEd,CACEgC,QAAS,OACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,SACThC,WAAY,SAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,mBACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,QACThC,WAAY,WAEd,CACEgC,QAAS,SACThC,WAAY,SAEd,CACEgC,QAAS,aACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,QAEd,CACEgC,QAAS,SACThC,WAAY,SAEd,CACEgC,QAAS,aACThC,WAAY,SAEd,CACEgC,QAAS,OACThC,WAAY,SAEd,CACEgC,QAAS,SACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,QACThC,WAAY,QAEd,CACEgC,QAAS,YACThC,WAAY,SAEd,CACEgC,QAAS,aACThC,WAAY,QAEd,CACEgC,QAAS,QACThC,WAAY,OAEd,CACEgC,QAAS,kBACThC,WAAY,QAEd,CACEgC,QAAS,aACThC,WAAY,UAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,QAEd,CACEgC,QAAS,OACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,QAEd,CACEgC,QAAS,mBACThC,WAAY,OAEd,CACEgC,QAAS,aACThC,WAAY,SAEd,CACEgC,QAAS,YACThC,WAAY,SAEd,CACEgC,QAAS,SACThC,WAAY,WAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,SACThC,WAAY,OAEd,CACEgC,QAAS,WACThC,WAAY,SAEd,CACEgC,QAAS,aACThC,WAAY,MAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,aACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,QACThC,WAAY,OAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,cACThC,WAAY,UAEd,CACEgC,QAAS,cACThC,WAAY,SAEd,CACEgC,QAAS,YACThC,WAAY,SAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,WAEd,CACEgC,QAAS,cACThC,WAAY,UAEd,CACEgC,QAAS,SACThC,WAAY,SAEd,CACEgC,QAAS,OACThC,WAAY,SAEd,CACEgC,QAAS,WACThC,WAAY,WAEd,CACEgC,QAAS,QACThC,WAAY,OAEd,CACEgC,QAAS,YACThC,WAAY,SAEd,CACEgC,QAAS,SACThC,WAAY,SAEd,CACEgC,QAAS,mBACThC,WAAY,SAEd,CACEgC,QAAS,WACThC,WAAY,SAEd,CACEgC,QAAS,OACThC,WAAY,UAEd,CACEgC,QAAS,cACThC,WAAY,WAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,UAEd,CACEgC,QAAS,cACThC,WAAY,SAEd,CACEgC,QAAS,QACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,qBACThC,WAAY,WAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,QAEd,CACEgC,QAAS,eACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,eACThC,WAAY,SAEd,CACEgC,QAAS,YACThC,WAAY,SAEd,CACEgC,QAAS,WACThC,WAAY,SAEd,CACEgC,QAAS,WACThC,WAAY,SAEd,CACEgC,QAAS,kBACThC,WAAY,QAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,eACThC,WAAY,UAEd,CACEgC,QAAS,cACThC,WAAY,UAEd,CACEgC,QAAS,cACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,QAEd,CACEgC,QAAS,YACThC,WAAY,QAEd,CACEgC,QAAS,SACThC,WAAY,SAEd,CACEgC,QAAS,cACThC,WAAY,SAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,aACThC,WAAY,SAEd,CACEgC,QAAS,WACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,UAEd,CACEgC,QAAS,OACThC,WAAY,SAEd,CACEgC,QAAS,QACThC,WAAY,QAEd,CACEgC,QAAS,sBACThC,WAAY,SAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,eACThC,WAAY,SAEd,CACEgC,QAAS,SACThC,WAAY,OAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,uBACThC,WAAY,SAEd,CACEgC,QAAS,iBACThC,WAAY,UAEd,CACEgC,QAAS,gBACThC,WAAY,WAEd,CACEgC,QAAS,UACThC,WAAY,SAEd,CACEgC,QAAS,aACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,QAEd,CACEgC,QAAS,YACThC,WAAY,UAEd,CACEgC,QAAS,UACThC,WAAY,UAEd,CACEgC,QAAS,QACThC,WAAY,UAEd,CACEgC,QAAS,aACThC,WAAY,QAEd,CACEgC,QAAS,SACThC,WAAY,UAEd,CACEgC,QAAS,WACThC,WAAY,WC/vBHuD,EAAY,CACvB,cACA,UACA,UACA,SACA,sBACA,YACA,UACA,QACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,UACA,SACA,UACA,yBACA,WACA,SACA,SACA,WACA,eACA,UACA,WACA,WACA,SACA,aACA,2BACA,OACA,QACA,QACA,WACA,QACA,eACA,aACA,UACA,OACA,SACA,iBACA,UACA,WACA,WACA,qBACA,aACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,OACA,UACA,SACA,mBACA,QACA,SACA,UACA,UACA,QACA,YACA,SACA,YACA,UACA,aACA,YACA,SACA,gBACA,SACA,QACA,WACA,YACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,SACA,QACA,mBACA,UACA,QACA,SACA,aACA,QACA,WACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,YACA,aACA,QACA,kBACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,YACA,SACA,UACA,SACA,WACA,aACA,UACA,aACA,UACA,UACA,QACA,QACA,cACA,cACA,YACA,QACA,UACA,cACA,SACA,OACA,WACA,QACA,YACA,SACA,mBACA,WACA,OACA,cACA,SACA,WACA,cACA,QACA,UACA,qBACA,SACA,QACA,eACA,UACA,eACA,YACA,WACA,WACA,kBACA,UACA,eACA,cACA,cACA,QACA,WACA,QACA,WACA,YACA,SACA,cACA,QACA,aACA,WACA,WACA,OACA,QACA,sBACA,UACA,SACA,eACA,SACA,SACA,UACA,uBACA,iBACA,gBACA,UACA,aACA,UACA,YACA,UACA,QACA,aACA,SACA,YC9CaC,cA5Ib,SAAAA,EAAYlE,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8D,GAEjB,IADA,IAAIC,EAA0B,GACrBC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAwBE,KACtBL,EACEM,KAAKC,MAAMD,KAAKE,SAAWR,EAAmBZ,SAC9CV,SANW,OASjBzC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgE,GAAA3D,KAAAH,KAAMJ,KACDQ,MAAQ,CACXyD,YACAQ,kBAAmBN,EACnBhB,YAAa,GACbuB,cAAe,GACfC,eAAe,GAEjB1E,EAAK2E,aAAe3E,EAAK2E,aAAaC,KAAlB3E,OAAA4E,EAAA,EAAA5E,QAAA4E,EAAA,EAAA5E,CAAAD,KACpBA,EAAK8E,oBAAsB9E,EAAK8E,oBAAoBF,KAAzB3E,OAAA4E,EAAA,EAAA5E,QAAA4E,EAAA,EAAA5E,CAAAD,KAC3BA,EAAK+E,iBAAmB/E,EAAK+E,iBAAiBH,KAAtB3E,OAAA4E,EAAA,EAAA5E,QAAA4E,EAAA,EAAA5E,CAAAD,KACxBA,EAAKgF,oBAAsBhF,EAAKgF,oBAAoBJ,KAAzB3E,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","file":"static/js/main.e4020bcb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass PopulationIncrementer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: this.props.population\n    };\n    this.launchCounter();\n  }\n\n  launchCounter() {\n    setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <p className=\"tickerItem1\">\n        Current Global Population: {this.state.count.toLocaleString()}\n      </p>\n    );\n  }\n}\n\nexport default PopulationIncrementer;\n","import React from \"react\";\nimport PopulationIncrementer from \"./PopulationIncrementer\";\n\nconst WorldPop = props => {\n  const firstPop = props.total_population[0];\n  const secondPop = props.total_population[1];\n  let operator = secondPop > firstPop ? \"+\" : \"-\";\n  let emoji = operator === \"+\" ? \"👶🏽👶👶🏿👶🏻\" : \"☠️☠️☠️☠️\";\n  return (\n    <div className=\"worldPopContainer\">\n      <div className=\"worldPop\">\n        <div className=\"tickerGridContainer\">\n          {props.total_population.map((population, index) => {\n            if (index === 0) {\n              return operator === \"+\" ? (\n                <PopulationIncrementer key={index} population={population} />\n              ) : (\n                <p key={population} className=\"tickerItem1\">\n                  Today's Global Population: {population.toLocaleString()}\n                </p>\n              );\n            } else {\n              return (\n                <p key={population} className=\"tickerItem2\">\n                  Tomorrow's Global Population: {population.toLocaleString()}\n                </p>\n              );\n            }\n          })}\n          <p className=\"tickerItem3\">\n            Difference: {operator}\n            {(secondPop - firstPop).toLocaleString()} {emoji}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WorldPop;\n","import React from \"react\";\nimport \"./App.css\";\n\nconst Chart = ({ children, width, height }) => {\n  return (\n    <svg\n      className=\"gridChart\"\n      viewBox={`0 0 ${width} ${height}`}\n      width={width}\n      height={height}\n      display={\"block\"}\n    >\n      {children}\n    </svg>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport \"./App.css\";\n\nconst Bar = ({ x, y, width, height, country, population, color }) => {\n  const TEXT_PADDING = 5;\n  const NUM_PADDING = 5;\n  let yVal = y + height + TEXT_PADDING;\n  const xVal = x - TEXT_PADDING;\n  const transform = `rotate(-90 ${xVal} ${yVal})`;\n  return (\n    <g>\n      <text x={x} y={yVal} className=\"barText\" transform={transform}>\n        <tspan>{country}</tspan>\n      </text>\n      <text x={x} y={y - NUM_PADDING} className=\"barNums\">\n        {population.toLocaleString()}\n      </text>\n      <rect x={x} y={y} width={width} height={height} fill={color} />\n    </g>\n  );\n};\n\nexport default Bar;\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport \"./App.css\";\nimport Chart from \"./Chart\";\nimport Bar from \"./Bar\";\n\nconst BarChart = props => {\n  console.log(\"props\", props);\n  const BAR_WIDTH = 100;\n  const BAR_MARGIN = 30;\n  const MAX_HEIGHT = 500;\n  const X_OFFSET = 20;\n  const dataLength = props.populations.length;\n\n  const highestVal = d3.max(props.populations, d => d.population);\n  const scale = d3\n    .scaleLinear()\n    .domain([0, highestVal])\n    .range([0, MAX_HEIGHT - 30]);\n\n  const colour = d3\n    .scaleLinear()\n    .domain([0, highestVal])\n    .range([\"#c19898\", \"#4a4a48\"]);\n\n  return (\n    <div>\n      <Chart width={dataLength * (BAR_WIDTH + BAR_MARGIN)} height={MAX_HEIGHT}>\n        {props.populations.map((country, index) => {\n          const itemHeight = country.population;\n          return (\n            <Bar\n              key={country.country}\n              country={country.country}\n              population={country.population}\n              color={colour(country.population)}\n              x={index * (BAR_WIDTH + BAR_MARGIN) + X_OFFSET}\n              y={MAX_HEIGHT - scale(itemHeight)}\n              width={BAR_WIDTH}\n              height={scale(itemHeight)}\n            />\n          );\n        })}\n      </Chart>\n    </div>\n  );\n};\n\nexport default BarChart;\n","export const countryPopulations = [\n  {\n    country: 'Afghanistan',\n    population: 35530081\n  },\n  {\n    country: 'Albania',\n    population: 2930187\n  },\n  {\n    country: 'Algeria',\n    population: 41318142\n  },\n  {\n    country: 'Angola',\n    population: 29784193\n  },\n  {\n    country: 'Antigua and Barbuda',\n    population: 102012\n  },\n  {\n    country: 'Argentina',\n    population: 44271041\n  },\n  {\n    country: 'Armenia',\n    population: 2930450\n  },\n  {\n    country: 'Australia',\n    population: 24450561\n  },\n  {\n    country: 'Austria',\n    population: 8735453\n  },\n  {\n    country: 'Azerbaijan',\n    population: 9827589\n  },\n  {\n    country: 'Bahamas',\n    population: 395361\n  },\n  {\n    country: 'Bahrain',\n    population: 1492584\n  },\n  {\n    country: 'Bangladesh',\n    population: 164669751\n  },\n  {\n    country: 'Barbados',\n    population: 285719\n  },\n  {\n    country: 'Belarus',\n    population: 9468338\n  },\n  {\n    country: 'Belgium',\n    population: 11429336\n  },\n  {\n    country: 'Belize',\n    population: 374681\n  },\n  {\n    country: 'Benin',\n    population: 11175692\n  },\n  {\n    country: 'Bermuda',\n    population: 61349\n  },\n  {\n    country: 'Bhutan',\n    population: 807610\n  },\n  {\n    country: 'Bolivia',\n    population: 11051600\n  },\n  {\n    country: 'Bosnia and Herzegovina',\n    population: 3507017\n  },\n  {\n    country: 'Botswana',\n    population: 2291661\n  },\n  {\n    country: 'Brazil',\n    population: 209288278\n  },\n  {\n    country: 'Brunei',\n    population: 428697\n  },\n  {\n    country: 'Bulgaria',\n    population: 7084571\n  },\n  {\n    country: 'Burkina Faso',\n    population: 19193382\n  },\n  {\n    country: 'Burundi',\n    population: 10864245\n  },\n  {\n    country: 'Cambodia',\n    population: 16005373\n  },\n  {\n    country: 'Cameroon',\n    population: 24053727\n  },\n  {\n    country: 'Canada',\n    population: 36624199\n  },\n  {\n    country: 'Cape Verde',\n    population: 546388\n  },\n  {\n    country: 'Central African Republic',\n    population: 4659080\n  },\n  {\n    country: 'Chad',\n    population: 14899994\n  },\n  {\n    country: 'Chile',\n    population: 18054726\n  },\n  {\n    country: 'China',\n    population: 1409517397\n  },\n  {\n    country: 'Colombia',\n    population: 49065615\n  },\n  {\n    country: 'Congo',\n    population: 5260750\n  },\n  {\n    country: 'Cook Islands',\n    population: 17380\n  },\n  {\n    country: 'Costa Rica',\n    population: 4905769\n  },\n  {\n    country: 'Croatia',\n    population: 4189353\n  },\n  {\n    country: 'Cuba',\n    population: 11484636\n  },\n  {\n    country: 'Cyprus',\n    population: 1179551\n  },\n  {\n    country: 'Czech Republic',\n    population: 10618303\n  },\n  {\n    country: 'Denmark',\n    population: 5733551\n  },\n  {\n    country: 'Djibouti',\n    population: 956985\n  },\n  {\n    country: 'Dominica',\n    population: 73925\n  },\n  {\n    country: 'Dominican Republic',\n    population: 10766998\n  },\n  {\n    country: 'East Timor',\n    population: 1296311\n  },\n  {\n    country: 'Ecuador',\n    population: 16624858\n  },\n  {\n    country: 'Egypt',\n    population: 97553151\n  },\n  {\n    country: 'El Salvador',\n    population: 6377853\n  },\n  {\n    country: 'Equatorial Guinea',\n    population: 1267689\n  },\n  {\n    country: 'Eritrea',\n    population: 5068831\n  },\n  {\n    country: 'Estonia',\n    population: 1309632\n  },\n  {\n    country: 'Ethiopia',\n    population: 104957438\n  },\n  {\n    country: 'Fiji',\n    population: 905502\n  },\n  {\n    country: 'Finland',\n    population: 5523231\n  },\n  {\n    country: 'France',\n    population: 64979548\n  },\n  {\n    country: 'French Polynesia',\n    population: 283007\n  },\n  {\n    country: 'Gabon',\n    population: 2025137\n  },\n  {\n    country: 'Gambia',\n    population: 2100568\n  },\n  {\n    country: 'Georgia',\n    population: 3912061\n  },\n  {\n    country: 'Germany',\n    population: 82114224\n  },\n  {\n    country: 'Ghana',\n    population: 28833629\n  },\n  {\n    country: 'Gibraltar',\n    population: 34571\n  },\n  {\n    country: 'Greece',\n    population: 11159773\n  },\n  {\n    country: 'Greenland',\n    population: 56480\n  },\n  {\n    country: 'Grenada',\n    population: 107825\n  },\n  {\n    country: 'Guadeloupe',\n    population: 449568\n  },\n  {\n    country: 'Guatemala',\n    population: 16913503\n  },\n  {\n    country: 'Guinea',\n    population: 12717176\n  },\n  {\n    country: 'Guinea-Bissau',\n    population: 1861283\n  },\n  {\n    country: 'Guyana',\n    population: 777859\n  },\n  {\n    country: 'Haiti',\n    population: 10981229\n  },\n  {\n    country: 'Honduras',\n    population: 9265067\n  },\n  {\n    country: 'Hong Kong',\n    population: 7364883\n  },\n  {\n    country: 'Hungary',\n    population: 9721559\n  },\n  {\n    country: 'Iceland',\n    population: 335025\n  },\n  {\n    country: 'India',\n    population: 1339180127\n  },\n  {\n    country: 'Indonesia',\n    population: 263991379\n  },\n  {\n    country: 'Iran',\n    population: 81162788\n  },\n  {\n    country: 'Iraq',\n    population: 38274618\n  },\n  {\n    country: 'Ireland',\n    population: 4761657\n  },\n  {\n    country: 'Israel',\n    population: 8321570\n  },\n  {\n    country: 'Italy',\n    population: 59359900\n  },\n  {\n    country: \"Côte d'Ivoire\",\n    population: 24294750\n  },\n  {\n    country: 'Jamaica',\n    population: 2890299\n  },\n  {\n    country: 'Japan',\n    population: 127484450\n  },\n  {\n    country: 'Jordan',\n    population: 9702353\n  },\n  {\n    country: 'Kazakhstan',\n    population: 18204499\n  },\n  {\n    country: 'Kenya',\n    population: 49699862\n  },\n  {\n    country: 'Kiribati',\n    population: 116398\n  },\n  {\n    country: 'Kuwait',\n    population: 4136528\n  },\n  {\n    country: 'Kyrgyzstan',\n    population: 6045117\n  },\n  {\n    country: 'Laos',\n    population: 6858160\n  },\n  {\n    country: 'Latvia',\n    population: 1949670\n  },\n  {\n    country: 'Lebanon',\n    population: 6082357\n  },\n  {\n    country: 'Lesotho',\n    population: 2233339\n  },\n  {\n    country: 'Liberia',\n    population: 4731906\n  },\n  {\n    country: 'Libya',\n    population: 5605000\n  },\n  {\n    country: 'Lithuania',\n    population: 2890297\n  },\n  {\n    country: 'Luxembourg',\n    population: 583455\n  },\n  {\n    country: 'Macao',\n    population: 473000\n  },\n  {\n    country: 'North Macedonia',\n    population: 2024000\n  },\n  {\n    country: 'Madagascar',\n    population: 25570895\n  },\n  {\n    country: 'Malawi',\n    population: 18622104\n  },\n  {\n    country: 'Malaysia',\n    population: 31624264\n  },\n  {\n    country: 'Maldives',\n    population: 436330\n  },\n  {\n    country: 'Mali',\n    population: 18541980\n  },\n  {\n    country: 'Malta',\n    population: 430835\n  },\n  {\n    country: 'Marshall Islands',\n    population: 53127\n  },\n  {\n    country: 'Mauritania',\n    population: 4420184\n  },\n  {\n    country: 'Mauritius',\n    population: 1265138\n  },\n  {\n    country: 'Mexico',\n    population: 129163276\n  },\n  {\n    country: 'Moldova',\n    population: 4051212\n  },\n  {\n    country: 'Monaco',\n    population: 38695\n  },\n  {\n    country: 'Mongolia',\n    population: 3075647\n  },\n  {\n    country: 'Montserrat',\n    population: 5177\n  },\n  {\n    country: 'Morocco',\n    population: 35739580\n  },\n  {\n    country: 'Mozambique',\n    population: 29668834\n  },\n  {\n    country: 'Myanmar',\n    population: 53370609\n  },\n  {\n    country: 'Namibia',\n    population: 2533794\n  },\n  {\n    country: 'Nauru',\n    population: 11359\n  },\n  {\n    country: 'Nepal',\n    population: 29304998\n  },\n  {\n    country: 'Netherlands',\n    population: 17035938\n  },\n  {\n    country: 'New Zealand',\n    population: 4705818\n  },\n  {\n    country: 'Nicaragua',\n    population: 6217581\n  },\n  {\n    country: 'Niger',\n    population: 21477348\n  },\n  {\n    country: 'Nigeria',\n    population: 190886311\n  },\n  {\n    country: 'North Korea',\n    population: 25490965\n  },\n  {\n    country: 'Norway',\n    population: 5305383\n  },\n  {\n    country: 'Oman',\n    population: 4636262\n  },\n  {\n    country: 'Pakistan',\n    population: 197015955\n  },\n  {\n    country: 'Palau',\n    population: 21729\n  },\n  {\n    country: 'Palestine',\n    population: 4920724\n  },\n  {\n    country: 'Panama',\n    population: 4098587\n  },\n  {\n    country: 'Papua New Guinea',\n    population: 8251162\n  },\n  {\n    country: 'Paraguay',\n    population: 6811297\n  },\n  {\n    country: 'Peru',\n    population: 32165485\n  },\n  {\n    country: 'Philippines',\n    population: 104918090\n  },\n  {\n    country: 'Poland',\n    population: 38170712\n  },\n  {\n    country: 'Portugal',\n    population: 10329506\n  },\n  {\n    country: 'Puerto Rico',\n    population: 3663131\n  },\n  {\n    country: 'Qatar',\n    population: 2639211\n  },\n  {\n    country: 'Romania',\n    population: 19679306\n  },\n  {\n    country: 'Russian Federation',\n    population: 143989754\n  },\n  {\n    country: 'Rwanda',\n    population: 12208407\n  },\n  {\n    country: 'Samoa',\n    population: 196440\n  },\n  {\n    country: 'Saudi Arabia',\n    population: 32938213\n  },\n  {\n    country: 'Senegal',\n    population: 15850567\n  },\n  {\n    country: 'Sierra Leone',\n    population: 7557212\n  },\n  {\n    country: 'Singapore',\n    population: 5708844\n  },\n  {\n    country: 'Slovakia',\n    population: 5447662\n  },\n  {\n    country: 'Slovenia',\n    population: 2079976\n  },\n  {\n    country: 'Solomon Islands',\n    population: 611343\n  },\n  {\n    country: 'Somalia',\n    population: 14742523\n  },\n  {\n    country: 'South Africa',\n    population: 56717156\n  },\n  {\n    country: 'South Korea',\n    population: 50982212\n  },\n  {\n    country: 'South Sudan',\n    population: 12575714\n  },\n  {\n    country: 'Spain',\n    population: 46354321\n  },\n  {\n    country: 'SriLanka',\n    population: 20876917\n  },\n  {\n    country: 'Sudan',\n    population: 40533330\n  },\n  {\n    country: 'Suriname',\n    population: 563402\n  },\n  {\n    country: 'Swaziland',\n    population: 1008000\n  },\n  {\n    country: 'Sweden',\n    population: 9910701\n  },\n  {\n    country: 'Switzerland',\n    population: 8476005\n  },\n  {\n    country: 'Syria',\n    population: 18269868\n  },\n  {\n    country: 'Tajikistan',\n    population: 8921343\n  },\n  {\n    country: 'Tanzania',\n    population: 57310019\n  },\n  {\n    country: 'Thailand',\n    population: 69037513\n  },\n  {\n    country: 'Togo',\n    population: 7797694\n  },\n  {\n    country: 'Tonga',\n    population: 108020\n  },\n  {\n    country: 'Trinidad and Tobago',\n    population: 1369125\n  },\n  {\n    country: 'Tunisia',\n    population: 11532127\n  },\n  {\n    country: 'Turkey',\n    population: 80745020\n  },\n  {\n    country: 'Turkmenistan',\n    population: 5758075\n  },\n  {\n    country: 'Tuvalu',\n    population: 11192\n  },\n  {\n    country: 'Uganda',\n    population: 42862958\n  },\n  {\n    country: 'Ukraine',\n    population: 44222947\n  },\n  {\n    country: 'United Arab Emirates',\n    population: 9400145\n  },\n  {\n    country: 'United Kingdom',\n    population: 66181585\n  },\n  {\n    country: 'United States',\n    population: 324459463\n  },\n  {\n    country: 'Uruguay',\n    population: 3456750\n  },\n  {\n    country: 'Uzbekistan',\n    population: 31910641\n  },\n  {\n    country: 'Vanuatu',\n    population: 276244\n  },\n  {\n    country: 'Venezuela',\n    population: 31977065\n  },\n  {\n    country: 'Vietnam',\n    population: 95540800\n  },\n  {\n    country: 'Yemen',\n    population: 28250420\n  },\n  {\n    country: 'Yugoslavia',\n    population: 10640000\n  },\n  {\n    country: 'Zambia',\n    population: 17094130\n  },\n  {\n    country: 'Zimbabwe',\n    population: 16529904\n  }\n];\n","export const countries = [\n  'Afghanistan',\n  'Albania',\n  'Algeria',\n  'Angola',\n  'Antigua and Barbuda',\n  'Argentina',\n  'Armenia',\n  'Aruba',\n  'Australia',\n  'Austria',\n  'Azerbaijan',\n  'Bahamas',\n  'Bahrain',\n  'Bangladesh',\n  'Barbados',\n  'Belarus',\n  'Belgium',\n  'Belize',\n  'Benin',\n  'Bermuda',\n  'Bhutan',\n  'Bolivia',\n  'Bosnia and Herzegovina',\n  'Botswana',\n  'Brazil',\n  'Brunei',\n  'Bulgaria',\n  'Burkina Faso',\n  'Burundi',\n  'Cambodia',\n  'Cameroon',\n  'Canada',\n  'Cape Verde',\n  'Central African Republic',\n  'Chad',\n  'Chile',\n  'China',\n  'Colombia',\n  'Congo',\n  'Cook Islands',\n  'Costa Rica',\n  'Croatia',\n  'Cuba',\n  'Cyprus',\n  'Czech Republic',\n  'Denmark',\n  'Djibouti',\n  'Dominica',\n  'Dominican Republic',\n  'East Timor',\n  'Ecuador',\n  'Egypt',\n  'El Salvador',\n  'Equatorial Guinea',\n  'Eritrea',\n  'Estonia',\n  'Ethiopia',\n  'Fiji',\n  'Finland',\n  'France',\n  'French Polynesia',\n  'Gabon',\n  'Gambia',\n  'Georgia',\n  'Germany',\n  'Ghana',\n  'Gibraltar',\n  'Greece',\n  'Greenland',\n  'Grenada',\n  'Guadeloupe',\n  'Guatemala',\n  'Guinea',\n  'Guinea-Bissau',\n  'Guyana',\n  'Haiti',\n  'Honduras',\n  'Hong Kong',\n  'Hungary',\n  'Iceland',\n  'India',\n  'Indonesia',\n  'Iran',\n  'Iraq',\n  'Ireland',\n  'Israel',\n  'Italy',\n  \"Côte d'Ivoire\",\n  'Jamaica',\n  'Japan',\n  'Jordan',\n  'Kazakhstan',\n  'Kenya',\n  'Kiribati',\n  'Kuwait',\n  'Kyrgyzstan',\n  'Laos',\n  'Latvia',\n  'Lebanon',\n  'Lesotho',\n  'Liberia',\n  'Libya',\n  'Lithuania',\n  'Luxembourg',\n  'Macao',\n  'North Macedonia',\n  'Madagascar',\n  'Malawi',\n  'Malaysia',\n  'Maldives',\n  'Mali',\n  'Malta',\n  'Marshall Islands',\n  'Mauritania',\n  'Mauritius',\n  'Mexico',\n  'Moldova',\n  'Monaco',\n  'Mongolia',\n  'Montserrat',\n  'Morocco',\n  'Mozambique',\n  'Myanmar',\n  'Namibia',\n  'Nauru',\n  'Nepal',\n  'Netherlands',\n  'New Zealand',\n  'Nicaragua',\n  'Niger',\n  'Nigeria',\n  'North Korea',\n  'Norway',\n  'Oman',\n  'Pakistan',\n  'Palau',\n  'Palestine',\n  'Panama',\n  'Papua New Guinea',\n  'Paraguay',\n  'Peru',\n  'Philippines',\n  'Poland',\n  'Portugal',\n  'Puerto Rico',\n  'Qatar',\n  'Romania',\n  'Russian Federation',\n  'Rwanda',\n  'Samoa',\n  'Saudi Arabia',\n  'Senegal',\n  'Sierra Leone',\n  'Singapore',\n  'Slovakia',\n  'Slovenia',\n  'Solomon Islands',\n  'Somalia',\n  'South Africa',\n  'South Korea',\n  'South Sudan',\n  'Spain',\n  'SriLanka',\n  'Sudan',\n  'Suriname',\n  'Swaziland',\n  'Sweden',\n  'Switzerland',\n  'Syria',\n  'Tajikistan',\n  'Tanzania',\n  'Thailand',\n  'Togo',\n  'Tonga',\n  'Trinidad and Tobago',\n  'Tunisia',\n  'Turkey',\n  'Turkmenistan',\n  'Tuvalu',\n  'Uganda',\n  'Ukraine',\n  'United Arab Emirates',\n  'United Kingdom',\n  'United States',\n  'Uruguay',\n  'Uzbekistan',\n  'Vanuatu',\n  'Venezuela',\n  'Vietnam',\n  'Yemen',\n  'Yugoslavia',\n  'Zambia',\n  'Zimbabwe'\n];\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport BarChart from \"./BarChart\";\nimport { countryPopulations } from \"./countryPopulations\";\nimport { countries } from \"./countries\";\n\nclass Form extends Component {\n  constructor(props) {\n    let randomStartingCountries = [];\n    for (let i = 0; i < 4; i++) {\n      randomStartingCountries.push(\n        countryPopulations[\n          Math.floor(Math.random() * countryPopulations.length)\n        ].country\n      );\n    }\n    super(props);\n    this.state = {\n      countries,\n      selectedCountries: randomStartingCountries,\n      populations: [],\n      countryAndPop: [],\n      formSubmitted: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChangeCountry = this.handleChangeCountry.bind(this);\n    this.handleAddCountry = this.handleAddCountry.bind(this);\n    this.handleRemoveCountry = this.handleRemoveCountry.bind(this);\n  }\n\n  handleChangeCountry(e) {\n    let selected = this.state.selectedCountries.slice();\n    selected[e.target.id] = e.target.value;\n    this.setState({\n      selectedCountries: selected\n    });\n  }\n\n  handleAddCountry(e) {\n    e.preventDefault();\n    let newCountryIndex = Math.floor(\n      Math.random() * this.state.countries.length\n    );\n    let newCountry = this.state.countries[newCountryIndex];\n    this.setState({\n      selectedCountries: [...this.state.selectedCountries, newCountry]\n    });\n  }\n\n  handleRemoveCountry(e) {\n    e.preventDefault();\n    let selected = this.state.selectedCountries;\n    selected.pop();\n    this.setState({\n      selectedCountries: selected\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    let countryPops = [];\n    for (let country of this.state.selectedCountries) {\n      const countryPopFiltered = countryPopulations.filter(\n        obj => obj.country === country\n      );\n      countryPops.push(countryPopFiltered[0]);\n    }\n    this.setState({\n      countryAndPop: countryPops,\n      formSubmitted: true\n    });\n  }\n\n  render() {\n    let chart;\n    let buttons;\n    let addButton = (\n      <button id=\"addButton\" onClick={this.handleAddCountry}>\n        Add\n      </button>\n    );\n    let removeButton = (\n      <button id=\"removeButton\" onClick={this.handleRemoveCountry}>\n        Remove\n      </button>\n    );\n    if (this.state.formSubmitted) {\n      chart = (\n        <BarChart\n          populations={this.state.countryAndPop}\n          width={500}\n          height={500}\n        />\n      );\n    }\n    if (this.state.selectedCountries.length <= 2) {\n      buttons = <div className=\"addRemoveButtons\">{addButton}</div>;\n    } else if (\n      this.state.selectedCountries.length > 2 &&\n      this.state.selectedCountries.length < 6\n    ) {\n      buttons = (\n        <div className=\"addRemoveButtons\">\n          {addButton}\n          {removeButton}\n        </div>\n      );\n    } else {\n      buttons = <div className=\"addRemoveButtons\">{removeButton}</div>;\n    }\n    return (\n      <div>\n        <div className=\"spacer\" />\n        <div className=\"mainGridContainer\">\n          <form className=\"form\" onSubmit={this.handleSubmit}>\n            <h3>Compare current populations</h3>\n            <div className=\"countryDropdownWrapper\">\n              <div className=\"addRemoveButtons\" />\n              {buttons}\n              {this.state.selectedCountries.map((selectedCountry, i) => (\n                <select\n                  className=\"countryDropdown\"\n                  key={i}\n                  id={i}\n                  value={selectedCountry}\n                  onChange={this.handleChangeCountry}\n                >\n                  {this.state.countries.map(country => (\n                    <option key={country} country={country}>\n                      {country}\n                    </option>\n                  ))}\n                </select>\n              ))}\n            </div>\n            <div>\n              <br />\n              <input value=\"Submit\" type=\"submit\" className=\"submitButton\" />\n            </div>\n          </form>\n          {chart}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport \"./App.css\";\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <p>\n      Created Dec 2018 &copy;\n      <a href=\"https://andrewnbishop.com\" target=\"blank\">\n        Andrew Bishop\n      </a>\n      &nbsp;&nbsp;&nbsp;View{\" \"}\n      <a href=\"https://github.com/a-bishop/population-stats\" target=\"blank\">\n        the code\n      </a>\n    </p>\n  </div>\n);\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport WorldPop from \"./WorldPop\";\nimport Form from \"./Form\";\nimport Footer from \"./Footer\";\n\nclass App extends Component {\n  _isMounted = false;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      total_population: []\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.setState({\n      total_population: [7743812456, 7744022244]\n    });\n  }\n\n  render() {\n    if (this._isMounted) {\n      return (\n        <div className=\"main\">\n          <div className=\"content\">\n            <WorldPop {...this.state} />\n            <Form />\n          </div>\n          <Footer />\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}